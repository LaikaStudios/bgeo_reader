/*
 *  Copyright 2018 Laika, LLC. Authored by Peter Stuart
 *
 *  Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
 *  http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
 *  http://opensource.org/licenses/MIT>, at your option. This file may not be
 *  copied, modified, or distributed except according to those terms.
 */

#include <hboost/test/unit_test.hpp>

#include "bgeo/Bgeo.h"
#include "bgeo/Poly.h"

namespace ika
{
namespace bgeo
{
namespace test_psoup_cubes
{

class TestPsoupCubesFixture
{
public:
    TestPsoupCubesFixture()
        : bgeo("geo/psoup_cubes.bgeo")
    {
    }

protected:
    Bgeo bgeo;
};

HBOOST_FIXTURE_TEST_SUITE(test_psoup_cubes, TestPsoupCubesFixture)

HBOOST_AUTO_TEST_CASE(test_counts)
{
    HBOOST_CHECK_EQUAL(84, bgeo.getPointCount());
    HBOOST_CHECK_EQUAL(178, bgeo.getTotalVertexCount());
    HBOOST_CHECK_EQUAL(4, bgeo.getPrimitiveCount());
    HBOOST_CHECK_EQUAL(1, bgeo.getVertexAttributeCount());
    HBOOST_CHECK_EQUAL(2, bgeo.getPointAttributeCount());
    HBOOST_CHECK_EQUAL(2, bgeo.getPrimitiveAttributeCount());
    HBOOST_CHECK_EQUAL(1, bgeo.getDetailAttributeCount());
}

HBOOST_AUTO_TEST_CASE(test_uv)
{
    std::vector<float> uv;
    bgeo.getVertexUV(uv);

    std::vector<float> expected = {
        0.846205235, 0.286286592, 0.846205235, 0.412558585,
        0.972477257, 0.412558585, 0.972477257, 0.286286592,
        0.846205235, 0.143143296, 0.846205235, 0.269415289,
        0.972477257, 0.269415289, 0.972477257, 0.143143296,
        0.640618563, 0.406645417, 0.640618563, 0.53291738,
        0.766890585, 0.53291738, 0.766890585, 0.406645417,
        0, 0.570570111, 0, 0.696842074,
        0.126271993, 0.696842074, 0.126271993, 0.570570111,
        0.126271993, 0.553698719, 0.126271993, 0.427426785,
        0, 0.427426785, 0, 0.553698719,
        0.829333901, 0.126271993, 0.829333901, 0,
        0.703061879, 0, 0.703061879, 0.126271993,
        0.846205235, 0.572573185, 0.846205235, 0.698845208,
        0.972477257, 0.698845208, 0.972477257, 0.572573185,
        0.590829849, 0.213713393, 0.590829849, 0.339985371,
        0.717101812, 0.339985371, 0.717101812, 0.213713393,
        0.590829849, 0.583702207, 0.590829849, 0.709974229,
        0.717101812, 0.709974229, 0.717101812, 0.583702207,
        0.126271993, 0.983128667, 0.126271993, 0.856856644,
        0, 0.856856644, 0, 0.983128667,
        0.573958516, 0.709974229, 0.573958516, 0.583702207,
        0.447686553, 0.583702207, 0.447686553, 0.709974229,
        0.846205235, 0.126271993, 0.972477257, 0.126271993,
        0.972477257, 0, 0.846205235, 0,
        0.846205235, 0.429429919, 0.846205235, 0.555701911,
        0.972477257, 0.555701911, 0, 0.713713408,
        0, 0.839985371, 0.126271993, 0.839985371,
        0.223843277, 0.599577427, 0.223843277, 0.72584945,
        0.350115269, 0.72584945, 0.447686553, 0.213713393,
        0.447686553, 0.339985371, 0.573958516, 0.339985371,
        0.543047309, 0.126271993, 0.543047309, 0,
        0.416775346, 0, 0.686190605, 0.126271993,
        0.686190605, 0, 0.559918642, 0,
        0.559918642, 0.126271993, 0.416775346, 0.126271993,
        0.573958516, 0.213713393, 0.350115269, 0.599577427,
        0.126271993, 0.713713408, 0.972477257, 0.429429919,
        0.103485987, 0.142436221, 0.143014118, 0.113717362,
        0.12791571, 0.0672492608, 0.0790562481, 0.0672492608,
        0.0639578477, 0.113717362, 0.302899569, 0.322524965,
        0.287801176, 0.364087224, 0.327329248, 0.389774114,
        0.36685732, 0.364087224, 0.351758927, 0.322524965,
        0.332654804, 0.139404386, 0.374217093, 0.147342026,
        0.399904013, 0.105779752, 0.374217093, 0.072155118,
        0.332654804, 0.0929362848, 0.415716827, 0.473894626,
        0.415716827, 0.432332367, 0.376188695, 0.406645447,
        0.351759046, 0.432332367, 0.376188725, 0.473894596,
        0.278469771, 0.473894596, 0.30289948, 0.432332367,
        0.278469801, 0.406645417, 0.238941699, 0.432332367,
        0.238941684, 0.473894626, 0.514935732, 0.499581724,
        0.473373473, 0.478800565, 0.447686553, 0.512425184,
        0.473373473, 0.553987443, 0.514935732, 0.546049833,
        0.278469801, 0.213713393, 0.238941699, 0.239400342,
        0.238941684, 0.280962616, 0.278469771, 0.280962586,
        0.30289948, 0.239400342, 0.598060369, 0.494675845,
        0.623747289, 0.461051196, 0.598060369, 0.419488937,
        0.55649811, 0.427426577, 0.55649811, 0.473894656,
        0.351758927, 0.515456975, 0.302899569, 0.515456975,
        0.287801176, 0.557019234, 0.327329248, 0.582706153,
        0.36685732, 0.557019234, 0.249530211, 0.0880303979,
        0.291092485, 0.0672492608, 0.291092485, 0.020781165,
        0.249530211, 0.0128434962, 0.223843277, 0.0544057675,
        0.376188695, 0.213713393, 0.351759046, 0.239400342,
        0.376188725, 0.280962586, 0.415716827, 0.280962616,
        0.415716827, 0.239400342, 0.143014118, 0.296838105,
        0.103485987, 0.268119246, 0.0639578626, 0.296838105,
        0.0790562555, 0.343306184, 0.12791571, 0.343306184,
        0.0244296994, 0.168123156, 0.0639579073, 0.196842089,
        0.103485987, 0.183998615, 0.0244297292, 0.126560882,
        0.0150984274, 0.0464680381, 0, 0.092936255,
        0.0546265282, 0.0336246304, 0.127915755, 0,
        0.0790562108, 0, 0.152345434, 0.0336246304,
        0.206971973, 0.092936255, 0.19187355, 0.0464680679,
        0.182542235, 0.126560882, 0.143014058, 0.196842089,
        0.182542264, 0.168123156, 0.223843277, 0.322524935,
        0.24827297, 0.364087224, 0.514935732, 0.406645417,
        0.473373473, 0.432332337, 0.374217093, 0.0256869011,
        0.332654804, 0, 0.406385541, 0.364087224,
        0.43081522, 0.322524935, 0.598060369, 0.541144073,
        0.55649811, 0.566830933, 0.24827297, 0.557019234,
        0.223843277, 0.515456915, 0.406385541, 0.557019234,
        0.43081522, 0.515456915, 0.249530211, 0.134498611,
        0.291092485, 0.160185486, 0.0790562108, 0.410555452,
        0.127915755, 0.410555452, 0.152345434, 0.376930833,
        0.0546265319, 0.376930833, 0.19187355, 0.364087433,
        0.206971973, 0.317619205, 0.182542235, 0.283994585,
        0.182542264, 0.242432311, 0.143014044, 0.213713393,
        0.103485987, 0.226556823, 0.0639579222, 0.213713393,
        0.0244296994, 0.242432311, 0.0244297292, 0.283994585,
        0, 0.317619205, 0.0150984274, 0.364087433
    };

    HBOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(),
                                  uv.begin(), uv.end());
}

HBOOST_AUTO_TEST_CASE(test_P)
{
    std::vector<float> P;
    bgeo.getP(P);

    std::vector<float> expected = {
        -0.5, -0.5, -0.5,
        0.5, -0.5, -0.5,
        0.5, -0.5, 0.5,
        -0.5, -0.5, 0.5,
        -0.5, 0.5, -0.5,
        0.5, 0.5, -0.5,
        0.5, 0.5, 0.5,
        -0.5, 0.5, 0.5,
        -0.5, 0.700000048, -0.5,
        0.5, 0.700000048, -0.5,
        0.5, 0.700000048, 0.5,
        -0.5, 0.700000048, 0.5,
        -0.5, 1.70000005, -0.5,
        0.5, 1.70000005, -0.5,
        0.5, 1.70000005, 0.5,
        -0.5, 1.70000005, 0.5,
        -0.5, 1.9000001, -0.5,
        0.5, 1.9000001, -0.5,
        0.5, 1.9000001, 0.5,
        -0.5, 1.9000001, 0.5,
        -0.5, 2.9000001, -0.5,
        0.5, 2.9000001, -0.5,
        0.5, 2.9000001, 0.5,
        -0.5, 2.9000001, 0.5,
        0, 4.22914934, -0.900574267,
        0.313039601, 4.0017128, -0.900574386,
        0.193469167, 3.63371277, -0.900574446,
        -0.193469152, 3.63371277, -0.900574446,
        -0.313039601, 4.0017128, -0.900574386,
        -0.193468779, 4.82458591, -0.164574847,
        0.193468779, 4.82458591, -0.164574921,
        0.313039094, 4.66001177, -0.493723333,
        0, 4.55829906, -0.697148561,
        -0.313039094, 4.66001177, -0.493723333,
        0.81954819, 4.36971331, -0.164574653,
        0.939118505, 4.00171328, -0.164574623,
        0.81954819, 3.83713865, -0.493723392,
        0.626079082, 4.10342598, -0.69714886,
        0.626079321, 4.43257475, -0.493723333,
        0.699977636, 3.2657125, -0.164574593,
        0.386938363, 3.0382762, -0.164574847,
        0.19346948, 3.10113811, -0.493723422,
        0.386938184, 3.36742544, -0.69714886,
        0.699977517, 3.46913767, -0.493723392,
        -0.386938393, 3.0382762, -0.164574921,
        -0.699977636, 3.2657125, -0.164574593,
        -0.699977517, 3.46913791, -0.493723392,
        -0.386938155, 3.36742544, -0.697148919,
        -0.193469435, 3.10113811, -0.493723422,
        -0.939118505, 4.00171328, -0.164574593,
        -0.81954813, 4.36971331, -0.164574549,
        -0.626079321, 4.43257475, -0.493723333,
        -0.626079082, 4.10342598, -0.69714886,
        -0.81954819, 3.83713865, -0.493723392,
        -0.386938155, 4.43257475, 0.697148919,
        -0.193469435, 4.69886208, 0.493723422,
        -0.386938363, 4.761724, 0.164574847,
        -0.699977636, 4.53428745, 0.164574593,
        -0.699977517, 4.33086252, 0.493723392,
        -0.81954819, 3.96286154, 0.493723392,
        -0.939118505, 3.79828715, 0.164574623,
        -0.81954813, 3.43028712, 0.164574549,
        -0.626079321, 3.36742544, 0.493723333,
        -0.626079082, 3.69657421, 0.69714886,
        0.19346872, 2.97541404, 0.164574981,
        0.313039035, 3.13998842, 0.493723333,
        0, 3.24170089, 0.697148502,
        -0.313039035, 3.13998842, 0.493723333,
        -0.193468705, 2.97541404, 0.164575011,
        0.81954819, 3.96286154, 0.493723392,
        0.626079082, 3.69657421, 0.6971488,
        0.626079321, 3.36742544, 0.493723333,
        0.81954813, 3.43028712, 0.164574593,
        0.939118505, 3.79828715, 0.164574683,
        0.386938155, 4.43257475, 0.697148919,
        0.699977517, 4.33086252, 0.493723392,
        0.699977636, 4.53428745, 0.164574593,
        0.386938363, 4.761724, 0.164574847,
        0.193469435, 4.69886208, 0.493723422,
        0.313039601, 3.79828715, 0.900574446,
        0.193469092, 4.16628742, 0.900574446,
        -0.193469077, 4.16628742, 0.900574446,
        -0.313039511, 3.79828715, 0.900574446,
        0, 3.57085085, 0.900574386
    };

    HBOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(),
                                  P.begin(), P.end());
}

HBOOST_AUTO_TEST_CASE(test_N)
{
    std::vector<float> N;
    bgeo.getPointN(N);

    std::vector<float> expected = {
        -0.577350259, -0.577350259, -0.577350259,
        0.577350259, -0.577350259, -0.577350259,
        0.577350259, -0.577350259, 0.577350259,
        -0.577350259, -0.577350259, 0.577350259,
        -0.577350259, 0.577350259, -0.577350259,
        0.577350259, 0.577350259, -0.577350259,
        0.577350259, 0.577350259, 0.577350259,
        -0.577350259, 0.577350259, 0.577350259,
        -0.577350259, -0.577350259, -0.577350259,
        0.816496551, -0.408248276, -0.408248276,
        0.577350259, -0.577350259, 0.577350259,
        -0.577350259, -0.577350259, 0.577350259,
        -0.577350259, 0.577350259, -0.577350259,
        0.577350259, 0.577350259, -0.577350259,
        0.816496551, 0.408248276, 0.408248276,
        -0.577350259, 0.577350259, 0.577350259,
        -0.666666687, -0.666666687, -0.333333343,
        0.408248276, -0.408248276, -0.816496551,
        0.666666687, -0.666666687, 0.333333343,
        -0.408248276, -0.408248276, 0.816496551,
        -0.408248276, 0.408248276, -0.816496551,
        0.666666687, 0.666666687, -0.333333343,
        0.408248276, 0.408248276, 0.816496551,
        -0.666666687, 0.666666687, 0.333333343,
        8.60916956e-08, 0.354684174, -0.934986115,
        0.337324858, 0.109603561, -0.934986115,
        0.208478406, -0.286945552, -0.934986055,
        -0.208478361, -0.286945581, -0.934986055,
        -0.337324768, 0.109603465, -0.934986115,
        -0.208478093, 0.964603007, -0.161486387,
        0.208478093, 0.964603007, -0.161486492,
        0.33732456, 0.78726095, -0.51617074,
        7.53302487e-08, 0.677657247, -0.735377908,
        -0.33732456, 0.78726095, -0.51617074,
        0.852968574, 0.496353298, -0.161486536,
        0.981815219, 0.0998041779, -0.161486641,
        0.852968514, -0.0775379017, -0.516170919,
        0.644490361, 0.209407583, -0.735377908,
        0.644490123, 0.56409198, -0.516171038,
        0.735641778, -0.657839715, -0.161486864,
        0.39831689, -0.902920604, -0.161486894,
        0.189838737, -0.835181713, -0.516171217,
        0.398317099, -0.548236191, -0.735377908,
        0.735641778, -0.438632548, -0.516171038,
        -0.398317009, -0.902920544, -0.161486924,
        -0.735641837, -0.657839715, -0.161486849,
        -0.735641897, -0.438632548, -0.516170919,
        -0.398317099, -0.548236132, -0.735377848,
        -0.189838767, -0.835181713, -0.516171157,
        -0.981815219, 0.099804163, -0.161486566,
        -0.852968574, 0.496353298, -0.161486372,
        -0.644490123, 0.56409198, -0.516171038,
        -0.644490361, 0.209407464, -0.735377967,
        -0.852968633, -0.0775379241, -0.516170859,
        -0.398317099, 0.548236251, 0.735377789,
        -0.189838797, 0.835181952, 0.516170859,
        -0.39831689, 0.902920604, 0.161486596,
        -0.735641718, 0.657839775, 0.161486953,
        -0.735641778, 0.438632607, 0.516170979,
        -0.852968514, 0.0775379092, 0.516170979,
        -0.981815159, -0.0998041332, 0.161486775,
        -0.852968633, -0.496353298, 0.161486566,
        -0.644490242, -0.56409204, 0.516170979,
        -0.644490421, -0.209407687, 0.735377789,
        0.208478123, -0.964603007, 0.161486283,
        0.337324709, -0.78726095, 0.51617074,
        1.07614646e-08, -0.677657485, 0.73537761,
        -0.337324739, -0.78726095, 0.516170681,
        -0.208478168, -0.964603007, 0.161486208,
        0.852968574, 0.0775379166, 0.516170919,
        0.644490421, -0.209407732, 0.735377729,
        0.644490242, -0.56409204, 0.516170919,
        0.852968633, -0.496353269, 0.161486581,
        0.981815219, -0.0998040885, 0.161486685,
        0.398317188, 0.548236251, 0.735377669,
        0.735641837, 0.438632667, 0.5161708,
        0.735641778, 0.657839835, 0.161486641,
        0.39831692, 0.902920604, 0.161486357,
        0.189838812, 0.835182011, 0.51617074,
        0.337324917, -0.109603621, 0.934986055,
        0.208478317, 0.286945611, 0.934986055,
        -0.208478406, 0.286945611, 0.934986055,
        -0.337324947, -0.109603561, 0.934985995,
        -3.22843938e-08, -0.354684442, 0.934985995
    };

    HBOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(),
                                  N.begin(), N.end());
}

HBOOST_AUTO_TEST_CASE(test_Cd)
{
    auto attribute = bgeo.getPrimitiveAttributeByName("Cd");
    HBOOST_REQUIRE(attribute);

    std::vector<float> Cd;
    attribute->getData(Cd);

    std::vector<float> expected = {
        0.00972020626, 0.555626988, 0.961190224,
        0.847074389, 0.0349613428, 0.897708297,
        0.263508916, 0.137006402, 0.0298968554,
        0.734308124, 0.865316153, 0.364416361
    };

    HBOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(),
                                  Cd.begin(), Cd.end());
}

HBOOST_AUTO_TEST_CASE(test_varmap)
{
    auto attribute = bgeo.getDetailAttributeByName("varmap");
    HBOOST_REQUIRE(attribute);

    std::vector<std::string> strings;
    attribute->getStrings(strings);

    HBOOST_CHECK_EQUAL(1, strings.size());
    HBOOST_CHECK_EQUAL("class -> CLASS", strings[0]);
}

HBOOST_AUTO_TEST_CASE(test_primitives_are_poly)
{
    for (int i = 0; i < bgeo.getPrimitiveCount(); i++)
    {
        auto primitive = bgeo.getPrimitive(0);
        HBOOST_REQUIRE(primitive);
        HBOOST_REQUIRE(primitive->isType<Poly>());
        const Poly* poly = primitive->cast<Poly>();
        HBOOST_CHECK(poly);
    }
}

HBOOST_AUTO_TEST_CASE(test_poly_0)
{
    assert(0 < bgeo.getPrimitiveCount());
    auto primitive = bgeo.getPrimitive(0);
    auto poly = primitive->cast<Poly>();
    assert(poly);

    HBOOST_CHECK_EQUAL(6, poly->getFaceCount());

    std::vector<int32_t> vertices;
    poly->getVertexList(vertices);

    std::vector<int32_t> expected_vertices = {
        1, 5, 4, 0,
        2, 6, 5, 1,
        3, 7, 6, 2,
        0, 4, 7, 3,
        2, 1, 0, 3,
        5, 6, 7, 4
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_vertices.begin(), expected_vertices.end(),
                                  vertices.begin(), vertices.end());

    std::vector<int32_t> start;
    poly->getStartIndices(start);

    std::vector<int32_t> expected_start = {
        0, 4, 8, 12, 16, 20, 24
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_start.begin(), expected_start.end(),
                                  start.begin(), start.end());
}

HBOOST_AUTO_TEST_CASE(test_poly_1)
{
    assert(1 < bgeo.getPrimitiveCount());
    auto primitive = bgeo.getPrimitive(1);
    auto poly = primitive->cast<Poly>();
    assert(poly);

    HBOOST_CHECK_EQUAL(7, poly->getFaceCount());

    std::vector<int32_t> vertices;
    poly->getVertexList(vertices);

    std::vector<int32_t> expected_vertices = {
        9, 13, 12, 8,
        11, 15, 14, 10,
        8, 12, 15, 11,
        10, 9, 8, 11,
        13, 14, 15, 12,
        14, 13, 9,
        9, 10, 14
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_vertices.begin(), expected_vertices.end(),
                                  vertices.begin(), vertices.end());

    std::vector<int32_t> start;
    poly->getStartIndices(start);

    std::vector<int32_t> expected_start = {
        0, 4, 8, 12, 16, 20, 23, 26
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_start.begin(), expected_start.end(),
                                  start.begin(), start.end());
}

HBOOST_AUTO_TEST_CASE(test_poly_2)
{
    assert(2 < bgeo.getPrimitiveCount());
    auto primitive = bgeo.getPrimitive(2);
    auto poly = primitive->cast<Poly>();
    assert(poly);

    HBOOST_CHECK_EQUAL(12, poly->getFaceCount());

    std::vector<int32_t> vertices;
    poly->getVertexList(vertices);

    std::vector<int32_t> expected_vertices = {
        17, 21, 20,
        18, 22, 21,
        19, 23, 22,
        16, 20, 23,
        18, 17, 16,
        21, 22, 23,
        23, 20, 21,
        16, 19, 18,
        23, 19, 16,
        22, 18, 19,
        21, 17, 18,
        20, 16, 17
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_vertices.begin(), expected_vertices.end(),
                                  vertices.begin(), vertices.end());

    std::vector<int32_t> start;
    poly->getStartIndices(start);

    std::vector<int32_t> expected_start = {
        0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_start.begin(), expected_start.end(),
                                  start.begin(), start.end());
}

HBOOST_AUTO_TEST_CASE(test_poly_3)
{
    assert(3 < bgeo.getPrimitiveCount());
    auto primitive = bgeo.getPrimitive(3);
    auto poly = primitive->cast<Poly>();
    assert(poly);

    HBOOST_CHECK_EQUAL(32, poly->getFaceCount());

    std::vector<int32_t> vertices;
    poly->getVertexList(vertices);

    std::vector<int32_t> expected_vertices = {
        24, 28, 27, 26, 25,
        29, 33, 32, 31, 30,
        34, 38, 37, 36, 35,
        39, 43, 42, 41, 40,
        44, 48, 47, 46, 45,
        49, 53, 52, 51, 50,
        54, 58, 57, 56, 55,
        59, 63, 62, 61, 60,
        64, 68, 67, 66, 65,
        69, 73, 72, 71, 70,
        74, 78, 77, 76, 75,
        79, 83, 82, 81, 80,
        38, 31, 32, 24, 25, 37,
        43, 36, 37, 25, 26, 42,
        48, 41, 42, 26, 27, 47,
        53, 46, 47, 27, 28, 52,
        33, 51, 52, 28, 24, 32,
        57, 50, 51, 33, 29, 56,
        61, 45, 46, 53, 49, 60,
        64, 40, 41, 48, 44, 68,
        73, 35, 36, 43, 39, 72,
        77, 30, 31, 38, 34, 76,
        78, 55, 56, 29, 30, 77,
        58, 59, 60, 49, 50, 57,
        62, 67, 68, 44, 45, 61,
        65, 71, 72, 39, 40, 64,
        69, 75, 76, 34, 35, 73,
        55, 78, 74, 80, 81, 54,
        75, 69, 70, 79, 80, 74,
        71, 65, 66, 83, 79, 70,
        67, 62, 63, 82, 83, 66,
        59, 58, 54, 81, 82, 63
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_vertices.begin(), expected_vertices.end(),
                                  vertices.begin(), vertices.end());

    std::vector<int32_t> start;
    poly->getStartIndices(start);

    std::vector<int32_t> expected_start = {
        0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55,
        60, 66, 72, 78, 84, 90, 96, 102, 108, 114,
        120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180
    };
    HBOOST_CHECK_EQUAL_COLLECTIONS(expected_start.begin(), expected_start.end(),
                                  start.begin(), start.end());
}

HBOOST_AUTO_TEST_SUITE_END()

} // namespace test_psoup_cubes
} // namespace bgeo
} // namespace ika
